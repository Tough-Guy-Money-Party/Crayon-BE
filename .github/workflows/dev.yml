name: dev
on:
  push:
    branches: [ "dev" ]
  pull_request:
    branches: [ "dev" ]
jobs:
  build:
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      mongo:
        image: mongo:6.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongo --eval 'db.runCommand({ ping: 1 })' --quiet"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      # gradle caching
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*gradle*','**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      # gradle 빌드
      - name: Build with Gradle Wrapper
        run: ./gradlew build
  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      # gradle caching
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*gradle*','**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      # gradle 빌드
      - name: Build with Gradle Wrapper
        run: ./gradlew build -x test
      # 도커 이미지 생성 후 ARM 아키텍처로 이미지 push
      - name: Docker build & push to dev (ARM compatible)
        run: |
          docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}
          docker buildx create --use
          docker buildx build --platform linux/arm64 -f Dockerfile-dev -t ${{ secrets.DOCKERHUB_USERNAME }}/crayon-dev-arm --push .
      # 오라클 클라우드 서버로 배포
      - name: Deploy to Oracle Cloud server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.ORACLE_TEST_SERVER_HOST }}
          username: ${{ secrets.ORACLE_TEST_SERVER_USER }}
          key: ${{ secrets.ORACLE_TEST_SERVER_PRIVATE_KEY }}
          envs: GITHUB_SHA
          script: |
            # spring-dev 컨테이너의 ID 가져오기 (실행 중 또는 종료 상태 모두 포함)
            EXISTING_CONTAINER_ID=$(sudo docker ps -aq -f "name=spring-dev")
            if [ ! -z "$EXISTING_CONTAINER_ID" ]; then
              sudo docker stop spring-dev || true
              sudo docker rm spring-dev
            fi
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/crayon-dev-arm

            sudo docker run --network test-server-network --name spring-dev -d -p 8080:8080 --env-file ./crayon.env -v ${{ secrets.ORACLE_DIR }}:${{ secrets.DOCKER_DIR }} -e TZ=Asia/Seoul ${{ secrets.DOCKERHUB_USERNAME }}/crayon-dev-arm

            sudo docker image prune -a -f
      
