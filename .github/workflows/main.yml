name: Crayon-BE CICD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # Install Node.js and pnpm
      - name: Set up Node.js 18 and pnpm
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install pnpm
        run: npm install -g pnpm

      # Gradle caching
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*gradle*','**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # Build with Gradle Wrapper
      - name: Build with Gradle Wrapper
        run: ./gradlew build

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # Install Node.js and pnpm
      - name: Set up Node.js 18 and pnpm
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install pnpm
        run: npm install -g pnpm

      # Install dependencies using pnpm
      - name: Install dependencies
        run: pnpm install
        working-directory: ./app/vite-notion-to-site

      # Gradle caching
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*gradle*','**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # Build with Gradle Wrapper
      - name: Build with Gradle Wrapper
        run: ./gradlew build

      # Docker build & push to dev
      - name: Docker build & push to dev
        run: |
          docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/crayon .
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/crayon

      # Deploy to server
      - name: Deploy to server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ubuntu
          key: ${{ secrets.SERVER_PASSWORD }}
          envs: GITHUB_SHA
          script: |
            EXISTING_CONTAINER_ID=$(sudo docker ps -q -f "status=running")
            if [ ! -z "$EXISTING_CONTAINER_ID" ]; then
              sudo docker stop $EXISTING_CONTAINER_ID
              sudo docker rm $EXISTING_CONTAINER_ID
            fi

            EXISTING_CONTAINER_ID=$(sudo docker ps -q -f "status=exited")
            if [ ! -z "$EXISTING_CONTAINER_ID" ]; then
              sudo docker rm $EXISTING_CONTAINER_ID
            fi

            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/crayon
            sudo docker run --network host --name spring -d -p 8080:8080 --env-file ./crayon.env -v ${{ secrets.EC2_DIR }}:${{ secrets.DOCKER_DIR }} ${{ secrets.DOCKERHUB_USERNAME }}/crayon

            sudo docker image prune -a -f
